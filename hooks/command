#!/bin/bash
set -euo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/plugin.bash
. "$DIR/../lib/plugin.bash"

# mandatory configurations
cluster=${BUILDKITE_PLUGIN_ECS_DEPLOY_CLUSTER?Missing cluster}
task_family=${BUILDKITE_PLUGIN_ECS_DEPLOY_TASK_FAMILY?Missing task family}
service_name=${BUILDKITE_PLUGIN_ECS_DEPLOY_SERVICE?Missing service name}

if ! plugin_read_list_into_result "IMAGE"; then
  echo ":boom: Missing image to use"
  exit 1
fi
images=("${result[@]}")

# optional configurations
desired_count=${BUILDKITE_PLUGIN_ECS_DEPLOY_DESIRED_COUNT:-"1"}
target_group=${BUILDKITE_PLUGIN_ECS_DEPLOY_TARGET_GROUP:-""}
load_balancer_name=${BUILDKITE_PLUGIN_ECS_DEPLOY_LOAD_BALANCER_NAME:-""}
target_container=${BUILDKITE_PLUGIN_ECS_DEPLOY_TARGET_CONTAINER_NAME:-""}
target_port=${BUILDKITE_PLUGIN_ECS_DEPLOY_TARGET_CONTAINER_PORT:-""}

if [ -z "${BUILDKITE_PLUGIN_ECS_DEPLOY_CONTAINER_DEFINITIONS:-}" ]; then
  container_definitions=$(mktemp)
  if ! aws ecs describe-task-definition --task-definition "${task_family}" --query 'taskDefinition.containerDefinitions' >"${container_definitions}"; then
    echo ":boom: Could not get container definitions"
    exit 1
  fi
  container_definitions_json=$(cat "${container_definitions}")
  rm "${container_definitions}"
else
  container_definitions_json=$(cat "${BUILDKITE_PLUGIN_ECS_DEPLOY_CONTAINER_DEFINITIONS}")
fi

if [[ $(jq '. | keys | first' <<<"$container_definitions_json") != "0" ]]; then
    echo "^^^"
    echo "Invalid Container Definitions"
    echo 'JSON definition should be in the format of [{"image": "..."}]'
    exit 1
fi

# necessary for compatibility with bash 4.3
if plugin_read_list_into_result "ENV"; then
  env_vars=("${result[@]}")
else
  env_vars=()
fi

aws_default_args=()
if [ -n "${BUILDKITE_PLUGIN_ECS_DEPLOY_REGION:-}" ]; then
  aws_default_args+=(--region "${BUILDKITE_PLUGIN_ECS_DEPLOY_REGION}")
fi

# Resolve any runtime environment variables it has
target_group=$(eval "echo $target_group")
load_balancer_name=$(eval "echo $load_balancer_name")

## This is the template definition of your containers
image_idx=0
for image in "${images[@]}"; do
  container_definitions_json=$(
    echo "$container_definitions_json" \
    | jq --arg IMAGE "$image" ".[${image_idx}].image=\$IMAGE"
  )

  # this check is only necessary to be compatible with bash 4.3 (see issue #81)
  if [ "${#env_vars[@]}" -gt 0 ]; then
    for env_var in "${env_vars[@]}"; do
      IFS="=" read -r -a var_val <<< "${env_var}"
      container_definitions_json=$(
        echo "$container_definitions_json" \
        | jq --arg ENVVAR "${var_val[0]}" --arg ENVVAL "${var_val[1]}" \
          ".[${image_idx}].environment += [{\"name\": \$ENVVAR, \"value\": \$ENVVAL}]"
      )
    done
  fi

  image_idx=$((image_idx+1))
done

echo "--- :ecs: Registering new task definition for ${task_family}"
register_command=(aws ecs register-task-definition
    ${aws_default_args[@]+"${aws_default_args[@]}"}
    --family "${task_family}"
    --container-definitions "${container_definitions_json}"
)

task_role_arn=${BUILDKITE_PLUGIN_ECS_DEPLOY_TASK_ROLE_ARN:-""}
if [[ -n "${task_role_arn}" ]]; then
    register_command+=(--task-role-arn "${task_role_arn}")
fi

execution_role=${BUILDKITE_PLUGIN_ECS_DEPLOY_EXECUTION_ROLE:-""}
if [[ -n "${execution_role}" ]]; then
    register_command+=(--execution-role-arn "${execution_role}")
fi

task_definition=${BUILDKITE_PLUGIN_ECS_DEPLOY_TASK_DEFINITION:-""}
if [[ -n "${task_definition}" ]]; then
    task_definition_json=$(cat "${task_definition}")
    register_command+=(--cli-input-json "${task_definition_json}")
fi

echo "--- :ecs: register command:"

json_output=$("${register_command[@]}")
register_exit_code=$?

if [[ $register_exit_code -ne 0 ]] ; then
  echo "+++ ^^^"
  echo "+++ Failed to register task defintion"
  exit "$register_exit_code"
fi

task_revision=$(jq '.taskDefinition.revision' <<< "$json_output")
echo "Registered ${task_family}:${task_revision}"

# Create service if it doesn't already exist
aws_describe_service_args=(
  --cluster "$cluster"
  --service "$service_name"
)

aws_create_service_args=(
  --cluster "$cluster"
  --service-name "$service_name"
  --task-definition "${task_family}:${task_revision}"
  --desired-count "$desired_count"
)

service_definition=${BUILDKITE_PLUGIN_ECS_DEPLOY_SERVICE_DEFINITION:-""}
if [[ -n "${service_definition}" ]]; then
  service_definition_json=$(cat "${service_definition}")
else
  service_definition_json="{}"
fi

service_defined=$(
  aws ecs describe-services \
    "${aws_default_args[@]+"${aws_default_args[@]}"}" \
    "${aws_describe_service_args[@]}" \
    --query "services[?status=='ACTIVE'].status" \
    --output text \
    | wc -l
)

deployment_config=${BUILDKITE_PLUGIN_ECS_DEPLOY_DEPLOYMENT_CONFIGURATION:-"100/200"}
IFS="/" read -r -a min_max_percent <<< "${deployment_config}"
min_deploy_perc=${min_max_percent[0]}
max_deploy_perc=${min_max_percent[1]}

aws_create_service_args+=(--deployment-configuration "maximumPercent=${max_deploy_perc},minimumHealthyPercent=${min_deploy_perc}")

if [[ -n $target_container ]] && [[ -n $target_port ]]; then
  if [[ -n $target_group ]]; then
    load_balancer_ref="targetGroupArn=${target_group}"
  elif [[ -n $load_balancer_name ]]; then
    load_balancer_ref="loadBalancerName=${load_balancer_name}"
  else
    echo "+++ ^^^"
    echo '+++ You must specify either target-group or load-balancer-name'
    exit 1
  fi

  aws_create_service_args+=(--load-balancers "${load_balancer_ref},containerName=${target_container},containerPort=${target_port}")
fi

if [[ $service_defined -eq 0 ]]; then
  echo "--- :ecs: Creating a Service $service_name in cluster $cluster"

  aws ecs create-service \
    "${aws_default_args[@]+"${aws_default_args[@]}"}" \
    "${aws_create_service_args[@]}" \
    --cli-input-json "$service_definition_json"
fi

lb_config=$(aws ecs describe-services --cluster "$cluster" --services "$service_name" --query "services[?status=='ACTIVE']" | jq -r '.[0].loadBalancers[0]')
error="+++ ^^^
+++ Cannot update a service to add/remove a load balancer. First delete the service and then run again, or rename the service to force a new one to be created"

# No easy way to tell if the target group has changed, since describe-services only returns the load balancer name
if [[ "$lb_config" == "null" ]]; then
  if [[ -n "$target_group" ]] || [[ -n "$load_balancer_name" ]]; then
    echo "$error. ELB configured but none set in container"
    exit 1
  fi
fi

if [[ "$lb_config" == "null" ]]; then
  # noop
  true
elif [[ $(echo "$lb_config" | jq -r '.containerName') != "$target_container" ]] || [[ $(echo "$lb_config" | jq -r '.containerPort') -ne $target_port ]]; then
  echo "$error. Container config differs"
  exit 1
elif [[ -n "$target_group" ]] && [[ $(echo "$lb_config" | jq -r '.targetGroupArn') != "$target_group" ]]; then
  echo "$error. ALB config differs"
  exit 1
elif [[ -n "$load_balancer_name" ]] && [[ $(echo "$lb_config" | jq -r '.loadBalancerName') != "$load_balancer_name" ]]; then
  echo "$error. ELB config differs"
  exit 1
fi

echo "--- :ecs: Updating service for ${service_name}"
aws ecs update-service \
  ${aws_default_args[@]+"${aws_default_args[@]}"} \
  --cluster "${cluster}" \
  --service "${service_name}" \
  --task-definition "${task_family}:${task_revision}"

## Now we wait till it's stable
echo "--- :ecs: Waiting for services to stabilize"
deploy_exitcode=0
aws ecs wait services-stable \
  ${aws_default_args[@]+"${aws_default_args[@]}"} \
  --cluster "${cluster}" \
  --services "${service_name}" || deploy_exitcode=$?


service_events=$(aws ecs describe-services \
  ${aws_default_args[@]+"${aws_default_args[@]}"} \
  --cluster "${cluster}" \
  --service "${service_name}" \
  --query 'services[].events' --output text)

if [[ $deploy_exitcode -eq 0 ]]; then
  echo "--- :ecs: Service is up 🚀"
  echo "$service_events"
else
  echo "+++ :ecs: Service failed to deploy ❌"
  echo "$service_events"
  exit $deploy_exitcode
fi
